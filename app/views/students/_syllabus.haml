- cache current_student_data.cache_key('v1', current_user.is_staff?, :assignment_weights_key, :assignments_key, :grades_key, :submissions_key) do
  - current_course_data.by_assignment_type.each do |assignment_type, assignments|
    .assignment_type{:id => "assignment-type-#{assignment_type.id}" }
      - if assignment_type.max_value?
        %h3.collapse #{assignment_type.try(:name)} • #{ points current_student_data.score_for_assignment_type(assignment_type) }/#{points assignment_type.max_value}
      - else
        %h3.collapse #{assignment_type.try(:name)} • #{ points current_student_data.score_for_assignment_type(assignment_type) }/#{points current_student_data.point_total_for_assignment_type(assignment_type)}
      .small-12.columns
        - if assignment_type.student_weightable? && current_course.assignment_weight_open?
          .small-2.right
            - if current_student_data.weighted_assignments?
              %span.label.round= "#{current_student_data.weight_for_assignment_type(assignment_type)} #{term_for :weights}"
              = link_to "Change #{term_for :weights}", assignment_type_weights_path(:student_id => current_student.id), assignment_type: assignment_type, user_id: current_student, :class => "label tiny secondary round"
            - else
              = link_to "Set #{term_for :weights}", assignment_type_weights_path(:student_id => current_student.id), assignment_type: assignment_type, :class => "label tiny primary round"
        - elsif assignment_type.student_weightable?
          %span.label.round= "#{current_student_data.weight_for_assignment_type(assignment_type)} #{term_for :weights}"

        - if assignment_type.predictor_description?
          .small-10.columns
            %p= raw assignment_type.predictor_description 
          .columns
            %hr

        .small-12.columns
          %table.responsive
            - assignments.each do |assignment|
              - if assignment.visible? || current_student_data.grade_released_for_assignment?(assignment)
                %tr
                  %td
                    - if assignment.required?
                      %span.has-tip{:title => "This #{term_for :assignment} is required!", :data => {'tooltip' => true} }
                        %i.fi-star
                    %span.assignmentName= link_to assignment.name, assignment_path(assignment, :student_id => current_student)
                  %td
                    - if assignment.assignment_type.student_weightable?
                      - grade = current_student_data.grade_for_assignment(assignment)
                      %span.has-tip{:title => "#{points current_student_data.score_for_assignment(assignment)} / #{points current_student_data.point_total_for_assignment(assignment)} points (Multiplied), #{points grade.raw_score} / #{ points assignment.point_total } points (Raw)", :data => {'tooltip' => true}  }
                        - if current_student_data.grade_released_for_assignment?(assignment)
                          = "#{points current_student_data.score_for_assignment(assignment)}  / "
                          = points assignment.point_total

                    - else
                      - if current_student_data.grade_released_for_assignment?(assignment)
                        = "#{points current_student_data.score_for_assignment(assignment)}  / "
                        = points assignment.point_total

                  %td= "Due: #{assignment.due_at.strftime("%A, %B %d, %l:%M%p")}" if assignment.future?
                  - if assignment.student_logged? && assignment.open? && assignment_type.name == 'Attendance' && current_user.is_student?
                    %td
                      = simple_form_for current_student_data.grade_for_assignment(assignment), :url => self_log_grades_assignment_path(assignment), :method => :post do |f|
                        - present = current_student_data.present_for_class?(assignment)
                        = hidden_field_tag :present, !present
                        = f.submit (present ? assignment_type.student_logged_revert_button_text : assignment_type.student_logged_button_text), :class => "button #{present ? 'alert' : 'success'} tiny"
                  - if assignment.has_groups?
                    %td
                      - if current_student.group_for_assignment(assignment)
                        = link_to "See Group", group_path(current_student.group_for_assignment(assignment)), :class => "button tiny radius"
                        - if assignment.accepts_submissions?
                          = render "students/group_submissions", assignment: assignment, group: current_student.group_for_assignment(assignment)
                      - else
                        = link_to "Create a Group", new_group_path, :class => "button tiny radius primary"
                  - else
                    %td
                      - if assignment.accepts_submissions?
                        = render "students/submissions", assignment: assignment
                  %td
                    - if current_student_data.grade_released_for_assignment?(assignment) && current_student_data.grade_for_assignment(assignment).feedback?
                      = link_to "See Feedback", assignment_grade_path(assignment, :student_id => current_student), :class => "button tiny radius primary"
                  - if current_user.is_staff?
                    - if assignment.is_individual?
                      %td
                        - if current_student_data.grade_released_for_assignment?(assignment)
                          - grade = current_student_data.grade_for_assignment(assignment)
                          = link_to "Edit Grade", edit_assignment_grade_path(assignment.id, :student_id => current_student.id), :class => 'button tiny radius  secondary'
                        - else
                          = link_to 'Grade', edit_assignment_grade_path("assignment_id"=>assignment.id, :student_id => current_student.id), :class => 'button tiny radius'
                    - elsif assignment.has_groups?
                      %td
                        - if current_student_data.grade_released_for_assignment?(assignment)
                          - grade = current_student_data.grade_for_assignment(assignment)
                          = link_to "Edit Grade", group_grade_assignment_path(assignment, :group_id => current_student.group_for_assignment(assignment)), :class => 'button tiny radius secondary'
                        - else
                          = link_to 'Grade', group_grade_assignment_path("assignment_id"=>assignment.id, :group_id => current_student.group_for_assignment(assignment)), :class => 'button tiny radius'

    .clearfix


    - if current_course.team_challenges? && current_course.team_score_average?
      %h4 #{term_for :challenges} #{ points current_student.team_for_course(current_course).try(:challenge_grade_score) }/#{points current_course_data.point_total_for_challenges}
      - current_course_data.challenges.each do |challenge|
        %span= link_to challenge.name, challenge
        - if current_student.team_for_course(current_course)
          - if challenge.challenge_grade_for_team(current_student.team_for_course(current_course)).present?
            %span.points.earned= points challenge.challenge_grade_for_team(current_student.team_for_course(current_course)).try(:score)
            %span.points= "/"
        %span.points
          = points challenge.point_total
          = "points"
        - if challenge.future?
          %span.bold= " • Due: #{challenge.due_at.strftime("%A, %B %d, %l:%M%p")}"

  .clearfix
